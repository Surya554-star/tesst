import re

def process_logs(input_file, pr_log, dr_log, output_file):
    """
    Processes the logs (PR and DR) to extract relevant message blocks and types for given sources.
    """
    # Compile regex patterns
    message_type_pattern = re.compile(r"(540|541|542|543)")

    # Read the source references from the input file
    with open(input_file, "r") as infile:
        sources = [line.strip() for line in infile]

    # Open the output file for writing
    with open(output_file, "w") as outfile:
        for source in sources:
            outfile.write(f"Processing source: {source}\n")

            # Process PR log
            pr_results = extract_message_block(source, pr_log, "PR", message_type_pattern)
            outfile.writelines(pr_results)

            # Process DR log
            dr_results = extract_message_block(source, dr_log, "DR", message_type_pattern)
            outfile.writelines(dr_results)

            outfile.write("\n")

def extract_message_block(source, log_file, log_type, message_type_pattern):
    """
    Extracts the message block from the log file based on the source pattern and message type.
    """
    results = []
    capture_block = False
    message_block = []
    source_pattern = f"20C:SEME//{source}"

    with open(log_file, "r") as logfile:
        for line in logfile:
            # Check if the line contains the source pattern
            if source_pattern in line:
                capture_block = True
                message_block = [line]  # Start capturing the block with the current line
                continue

            if capture_block:
                if "---" in line:  # Stop capturing when a delimiter is found
                    capture_block = False
                    message_type = extract_message_type(message_block, message_type_pattern)
                    if message_type:
                        results.append(
                            f"{log_type}: Source: {source}, Message Type: {message_type}\n"
                        )
                        results.append(f"{log_type}: Message Block:\n{''.join(message_block)}\n")
                    else:
                        results.append(
                            f"{log_type}: Source: {source}, No valid message type found\n"
                        )
                    message_block = []  # Reset for the next block
                else:
                    message_block.append(line)  # Continue adding lines to the block

    return results

def extract_message_type(message_block, message_type_pattern):
    """
    Extracts the message type (540, 541, 542, 543) from the captured message block.
    """
    for line in message_block:
        match = message_type_pattern.search(line)
        if match:
            return match.group(1)
    return None

# Main Execution
if __name__ == "__main__":
    input_file = "/tmp/semfinal.txt"        # Input file with source references
    pr_log_file = "PR_server_IO.log"       # PR log file
    dr_log_file = "DR_server_IO.log"       # DR log file
    output_file = "Final_messages.txt"     # Output file

    process_logs(input_file, pr_log_file, dr_log_file, output_file)
    print(f"Message extraction completed. Results saved to {output_file}.")
